/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
  0x00
  calldataload // [ calldata[0,32] ]
  0xe0 // [224, calldata[0,32]]
  shr // [funcSelector]
  dup1 // [funcSelector, funcSelector]

  __FUNC_SIG(balanceOf) // [ maxOfArrayJumpSig, funcSelector, funcSelector ]
  eq // [EQUAL, funcSelector]
  balanceOfJump // [ maxOfArrayJump, EQUAL, funcSelector ]
  jumpi // [funcSelector]

  __FUNC_SIG(withdraw) // [ maxOfArrayJumpSig, funcSelector ]
  eq // [EQUAL]
  withdrawJump // [ maxOfArrayJump, EQUAL ]
  jumpi // []

  calldatasize 
  0x00
  eq
  receiveJump
  jumpi

  0x00 0x00 // [0, 0]
  revert 

  balanceOfJump:
    balanceOf()
  withdrawJump:
    withdraw()
  receiveJump:
    receive()
}

#define fn balanceOf()= takes(0) returns(0) {
  0x04
  calldataload
  sload 
  0x00
  mstore
  0x20 0x00 return
}

#define fn withdraw()= takes(0) returns(0) {
  0x04
  calldataload // [amount]
  dup1 // [amount, amount]
  caller
  sload // [balance, amount, amount]

  // overflow check
  dup2 dup2 // [balance, amount, balance, amount, amount]
  lt
  revertJump
  jumpi
  
  sub // [remainingBalance, amount]
  caller
  sstore // [amount]

  // send amount
  0x00 0x00 0x00 0x00 // [0, 0, 0, 0, amount]
  swap4 // [amount, 0, 0, 0, 0]
  caller 0x00 // [gas, receiver, amount, 0, 0, 0, 0] 
  call

  0x00 0x00 return

  revertJump: 
  0x00 0x00 revert
}

#define fn receive()= takes(0) returns(0) {
  caller
  sload 
  callvalue
  add
  caller
  sstore
  0x00 0x00 return  
}