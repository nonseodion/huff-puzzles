 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {
  // function selector
  0x00
  calldataload // [ calldata[0,32] ]
  0xe0 // [224, calldata[0,32]]
  shr // [funcSelector]

  __FUNC_SIG(value) // [ add1Sig, funcSelector ]
  eq // [EQUAL]
  valueJump // [ add1Pos, EQUAL ]
  jumpi // []

  0x00 0x00 // [0, 0]
  revert 

  valueJump:
    VALUE()
 }

 #define macro VALUE() = takes(0) returns(0) {
  0x04
  calldataload
  0x24
  calldataload // [value2, value1]
  0x00
  mstore
  __EVENT_HASH(Value) // [eventHash, value1]
  0x20 0x00 
  log2
 }
